#%%

# 载入第三方库
import numpy as np
import scipy.io as sio
import matplotlib.pyplot as plt



#%%

# 载入数据
data1=sio.loadmat('ex7data2.mat')

#%%

# 数据key
data1.keys()


#%%

x=data1['X']
x.shape

#%%

plt.scatter(x[:,0],x[:,1])
plt.show()

#%%

# 将数据按随机初始化的点进行一次分类
def find_centroids(x,centros):
    idx=[]
    for i in range(len(x)):
        dist =np.linalg.norm((x[i]-centros),axis=1)
        id_i=np.argmin(dist)
        idx.append(id_i)
    return np.array(idx)



#%%

centros=np.array([[3,3],[6,2],[8,5]]) # 随机初始化3个中心点
idx=find_centroids(x,centros)
idx[:3] # 看看前三个


#%%

# 计算所有类的均值,作为新的中心点
def compute_centros(x,idx,k):
    centros=[]
    for i in range(k):
        centros_i=np.mean(x[idx==i],axis=0)
        centros.append(centros_i)
    return np.array(centros)


#%%

compute_centros(x,idx,k=3)

#%%

# 迭代
def run_kemans(x,centros,iters):
    k=len(centros)
    centros_all=[]
    centros_all.append(centros)
    centros_i=centros
    for i in range(iters):
        idx=find_centroids(x,centros_i)
        centros_i=compute_centros(x,idx,k)
        centros_all.append(centros_i)
    return idx,np.array(centros_all)

#%%

def plot_data(x,centros_all,idx):
    plt.figure()
    plt.scatter(x[:,0],x[:,1],c=idx,cmap='coolwarm')
    plt.plot(centros_all[:,:,0],centros_all[:,:,1],'kx--')


#%%

idx,centros_all=run_kemans(x,centros,iters=10)
plot_data(x,centros_all,idx)

#%%

def init_centros(x,k):
    index=np.random.choice(len(x),k)
    return  x[index]


#%%

# 随机初始中心点位置对聚类效果的影响
def random_centros(x,k): # 从数据中随机选取
    index=np.random.choice(len(x),k)
    return x[index]


#%%

random_centros(x,k=3) # 一般3-10个


#%%

for i in range(4):
    idx,centros_all=run_kemans(x,random_centros(x,k=3),iters=10)
    plot_data(x,centros_all,idx)
