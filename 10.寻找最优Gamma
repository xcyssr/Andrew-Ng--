#%%

# 1.第三方库
import numpy as np
import scipy.io as sio
import matplotlib.pyplot as plt
from sklearn.svm import SVC

#%%

# 2.导入数据
data=sio.loadmat('ex6data3.mat')
data.keys()

#%%

# 3.整理数据
x=data['X']
y=data['y']      # 训练集
xv=data['Xval']
yv=data['yval']  # 验证集

x.shape,y.shape,xv.shape,yv.shape

#%%

# 4.绘制图像
def p_data():
    plt.scatter(x[:,0],x[:,1],c=y.flatten(),cmap='jet')
    plt.xlabel('x1')
    plt.xlabel('x2')

#%%

p_data()

#%%

# 5.假设一些C和gamma的候选值,交叉选择会得到81个
Cvalues=[0.01,0.03,0.1,0.3,1,3,10,30,100]     # 9
gammas=[0.01,0.03,0.1,0.3,1,3,10,30,100]  # 9

#%%

# 6.最高得分和最优参数
best_score=0        # 初始最高得分为0
best_params=(0,0)   # 用来存放最高得分

for c in Cvalues:
    for gamma in gammas:
        svc=SVC(C=c,kernel='rbf',gamma=gamma) # 初始化
        svc.fit(x,y.flatten())   # 拟合函数
        
        score=svc.score(xv,yv.flatten()) # 验证集的验证得分
        
        if score > best_score:
            best_score=score
            best_params=(c,gamma)
print(best_score,best_params)
# 0.965 (0.3, 100)

#%%

# 通过参数建立新的模型
svc2=SVC(C=0.3,kernel='rbf',gamma=100) # 初始化
svc2.fit(x,y.flatten())   # 拟合函数

#%%

# 6.当gamma=1时的图像
def p_boundary(model):
    
    x_min,x_max=-0.6,0.4  # x,y轴范围
    y_min,y_max=-0.7,0.6
    
    xx,yy=np.meshgrid(np.linspace(x_min,x_max,500),np.linspace(y_min,y_max,500))
    # 
    
    z=model.predict(np.c_[xx.flatten(),yy.flatten()])
    # 
    zz=z.reshape(xx.shape)
    #　
    plt.contour(xx,yy,zz)
    # 

#%%

p_boundary(svc2)
p_data()
